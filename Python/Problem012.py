# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
# ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?

from Problem005 import list_prime_factors

def triangle_numbers(limit=0):
    triangle = 1
    num = 2

    while True:
        
        if limit != 0 and triangle > limit:
            break

        yield triangle
        triangle += num
        num += 1

def factors(number):
    if number > 1:
        prime_factors = list_prime_factors(number)
    else:
        prime_factors = []

    factor_list = [1]

    for prime in prime_factors:

        for factor in factor_list[:]:
            n = factor * prime

            if n not in factor_list:
                factor_list.append(n)

    return sorted(factor_list)

def factor_count(number):
    return len(factors(number))

def triangle_with_more_factors(limit):
    for triangle in triangle_numbers():
        if factor_count(triangle) > limit:
            return triangle

if __name__ == "__main__":
    print triangle_with_more_factors(500)
