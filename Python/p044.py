# Pentagonal numbers are generated by the formula, P_(n)=n(3n-1)/2. The first 
# ten pentagonal numbers are:
# 
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
# 
# It can be seen that P_(4) + P_(7) = 22 + 70 = 92 = P_(8). However, their 
# difference, 70 - 22 = 48, is not pentagonal.
# 
# Find the pair of pentagonal numbers, P_(j) and P_(k), for which their sum 
# and difference is pentagonal and D = |P_(k) - P_(j)| is minimised; what is 
# the value of D?

from __future__ import division
from p045 import pentagonal, fn_num_gen
from itertools import islice, ifilter, count, takewhile
from math import sqrt
from operator import sub

def is_natural_number(n):
    if n == int(n):
        return True
    return False

def pent_number(pent):
    return (sqrt(24 * pent + 1) + 1) / 6

def is_pentagonal(x):
    n = pent_number(x)
    if is_natural_number(n):
        return True
    return False

def pent_diff(larger, smaller):
    return sum(map(lambda x: 3 * x + 1, xrange(smaller,larger)))

def pent_diffs(high, high_pent):
    diff = 0
    for n in xrange(high-1, 0, -1):
        diff += n*3+1
        if is_pentagonal(diff):
            yield (diff, high_pent - diff)

def pred_combo(*preds):
    """
    Combines a list of predicate functions into a single function.
    Terms passed into the resulting function must satisfy all predicates
    to return True.
    """
    def combo(term):
        return all( pred(term) for pred in preds )
    return combo

def pentagonals(limit=None):
    def is_needed(n):
        if limit is None or n < limit:
            return True
        return False

    return takewhile(is_needed, ( pentagonal(n) for n in count(1) ))
    
def find_pentagonal_pair():
    for n, pent1 in enumerate(pentagonals(), start=1):
        for diff, pent2 in pent_diffs(n, pent1):
            if is_pentagonal(pent1 + pent2):
                return (pent1, pent2)

if __name__ == "__main__":
    result = find_pentagonal_pair()
    print 'Pair:', result
    print 'Difference:', abs(reduce(sub,result))
